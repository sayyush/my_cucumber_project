
*************** CUCUMBER Framework *****************
Cucumber BDD(behaviour driven development) (davranis(fonksiyon, user storylar) tabanli gelistirme) yaklasimi icin kullanilmakta
olan acik kaynak kodlu bir kutuphanedir.
@ Neden Cucumber?
- Cucumber TDD(Test Driven Development) test odakli gelistirmeye izin verir, cunku Cucumber ile Junit veya TestNG kullanabiliriz.
- Cucumber is icin onemlidir, cunku anlasilabilir ve harika raporlara sahiptir.
- Cucumber, teknik olmayan (non-technical) kisileri ve teknik kisileri bir birine baglar.
- Developer veya team lead gibi teknik elemanlar da bazen testerlarin yaptigini anlamayabilir.
- Gherkin language, onlarinda testlerimizi anlamalarini kolaylastirir.




**********  CUCUMBER KURULUMU *************
1.File > New > Project > naming(ismini yaz) > Java > Maven > Create
2.dependencies ekliyoruz : Selenium Java(), webdrivermanager(apini kullanicaz),
                         cucumber java(framework olusturmak icin), cucumber junit(annotationlari kullanabilmemiz icin,
                         junit hizlidir, hemde Runner class'da @RunWith(Cucumber.class)<== bu junitden geliyor o yuzden..
                         Her birinin son versiyonunu almali, yada sirker veriyor.
3.<dependencies>  buraya dependency eklemeli     </dependencies>  kirmizilik olursa sag tarafta Maven'i refresh yada upload yaparsan duezelir.
4. src > test > java sag click new package > utilities
                              new package > pages
                              new package > runners
                              new package > stepdefinitions
5. projeye sag click New > File >File configuration.properties(bunun icine data koymak icin mesela browser:chrome ... )
6. utilities > New > Java Class > Driver, ConfigReader , ExcelUtils, Reusablemethods....(utility'leri testng den aldik genellikle)
7. test > new > Direcotry > resources    (bunu yazdiginda alttan oneri cikiyorsa onu tikla      resoruces kirmizi yesil pembe renki bir dosya olmaldir)
                                         egerde o renkler yoksa : resources > Mark Directory as > Test Resources Root a tikla
8. resources > new > directory > features(cucumber da yazdigimiz test senaryolarini yazdigimiz yer olacak)
9. ilk feature dosyamizi olusturalim : bu dosya bizim java kodu olmayan test senaryolarini iceren feature file;lardan olusan bir dosyadir.
   Ve isminin sonunda " .feature" eklenmelidir.
   features > New > File > firstfeaturefile.feature   rengi yesil olmaldir dosyanin, cucumber dilimi gibi, yani cucumber plugini kurdunuz demektir,
                                                      rengi gri ise son adimimizi gerceklesitrmemiz gerektir,plugin eklemek.
10 . cucumber plugins intelliJ'e ekle
                      File > Settings > Plugins > Marketplace > Cucumber for Java > install
                                                                Gherkin  nida install etmelidir.
                                                                bazen intellij'i kapatip acmali bazen olmuyorsa.

**************** PROJE OLUSTURULDU *****************






  feature file icinde:
     # All feature files must begin with "Feature" keyword
     # Her bir file da, yanliz bir "Feature" kullanilmalidir.
     #  We use "Scenario":to create test cases/test scenarios
     # File da birden fazla "Scenario" kullanilabilir.
     # Each line under Scenario : is called as STEP
     # Each step must begin with GHERKIN language - Given , And,  When, Then , But, *
     # Technically we can use any of these keyword in any step, but we should follow the best practice.
     # eger de then o, then bu, then su diye art arda yazarsak technically sorun degil ama anlamsiz.
     # BEST PRACTICE : "Given" for pre conditions in the first steps.
     #                 "And" and "When" in the middle.
     #                 "Then" in the verifications.
     #                  "But" and "*" is not used a lot
     #                  "*" : ANY
   # STEPS FOR CUCUMBER AUTOMATION :
   # 1. CREATE FEATURE FILE AND ADD TEST STEPS
   # 2. CREATE STEP DEFINITIONS AND ADD JAVA CODE

 To type the test cases we use 'Gherkin Language'
            The keywords are:  x) Given: It is used for pre-condition   ilk adim
                               y) When: It is used for actions(Requests...)
                               z) Then: It is used for output(Assertion/ Verification...)  son adim
                               t) And:  It is used for multiple usage of Given, When and Then






- Cucumber Page Object Model icin olusturdugumuz klasorler :
  pages               -> page objeler cin (registirationPage, homePage, vendorPage ...)
  runners             -> test caseleri run etmek, raporlar eklemek, feature file ile step definitions lari birlestir icin
  stepdefinitions     -> java kodlari
  utilities           -> reusable metotlar, driver, configreader, ...

- Cucumber feature klasoru
  Tum feature file lar bu klasore gider
  Tum test caseler gherkin dilinde bu klasorde yazilir.





                      -------- ADIMLAR -------------
1. Feature file olustur :firstfeature_file.feature   , her feature file'in arkasinda 1 tane java kod olmalidir.
2. Runner class ini run et
3. Console dan missing step definitions lari kopyala
4.Sonra console da cikan undefined missing stepleri stepdefinitionsda olusturdugumuz class in icine yapistiriyoruz.
5. Step definitions lara gerekli java kodlariniz yaz




                             GENERAL NOTES
*** Java kodlari "feature file daki siralamaya gore calisir".
*** Her Step icin bir tane java kodu yazilmali.
*** bir class'i runable etmek icin   " @RunWith annotation"   kullaniyoruz, onu Runner classin ustunde olusturuyoruz, bu sekilde design edilmis.
*** Bosluk kucuk buyuk harflere dikkat etmeli
*** Feature file dan run yapmiyoruz, sadece runner class'da run yapiyoruz.
*** Testng ve Junit den farkli 2 tane package var Cucumber da : runners and stepdefinitions
*** Code lar feature filedaki siralamaya gore calisir, stepdefinition'da sira onemli degil.
*** feature file da yazdigimiz stepler golgeli olmamali, bir eksik vardir demektir.
*** Belirli Scenario lari calistirmak icin cucumber "tags" ler kullanilir.
    tag ler Feature, Scenario, Scenario Outline , Examples kelimeleri ile birlikte kullanilabilir.
*** tags = "@data_tables"   Runner class da boyle yazarsak hangi scenarioyu calistirmak istersek onu run eder sadece.
***         @data_tables > bu da featurefile da Scenario keywordunun ustune yazilir/belirtilir.
*** Runner class inda birden fazla tag eklemek istersem, => tags = "@smoke and @regression"   "and" her ikiside olmasi lazim ve ikisinin oldugu Scenario calisir
                                                            tags = "@smoke or @regression"     "or" ikisinin birisi varsa calisir.(her ikisini calistirmak icin or kullan)  Javadaki gibi.
***  dryRun = true : RUNS AND GENERATES ONLY MISSING STEP DEFS. dryRun = false: RUN NORMAL. THIS IS DEFAULT VALUE
***  dryRun = true : diyince test case'leri calistirmiyor, sadece kontrol ediyor kacak gocek, tanimlanmamis step definition varmi diye.
***  dryRun = true : dedigimizde browser falan acmiycak, search yapmiycak.
***  dryRun = true : hizli bir sekilde zaman kaybi yasamamak icin kullanilir, yeni Scenario yada new step olusturdugumuzda kullanicaz.
***  dryRun = false : dryRun yokmus gibi normal sekilde calisir.Yani tum adimlari tek tek browserda acar.
***  dryRun = true : unutup true yaparak calistirmaya devam edersek, test passed yazarsa bu testin gecti anlamina gelmez,
                     sadece eksik adim kalmadi anlamidir.
***
***
***
***
***
***
***
***
***
***

                   ----------- Parameterising   "String" ---------------
    Scenario: TC02_tesla_search
    And user search for "tesla"        sadece "" 'in icini degistirmemiz yeter, alttaki kod hepsinde ayni dinamik kod
    Then verify the page title contains "tesla"

        @Given("user search for {string}")
        public void user_search_for(String string) {
            googlePage.searchBox.sendKeys(string+Keys.ENTER);
        }


        @Then("verify the page title contains {string}")
        public void verify_the_page_title_contains(String string) {
            Assert.assertTrue(Driver.getDriver().getTitle().contains(string));

        }

                 --------------- Scenario Outline   ---------------
Scenario Outline ayni Scenario i farkli degerlerle tekrar tekrar run etmek icin kullanilir.
"<column_name>" ifadesi verileri parametre seklinde gondermek icin kullanilir.
Examples, Scenario Outline dan sonra verileri girmek icin kullanilmalidir.
Scenario Outline, Data Driven Test icin kullanilir.
Scenario Outline, cucumber da cok onemlidir.

@scenario_outline_1
Feature: search_feature
  Background: goes_to_google
    Given user navigates to "https://www.google.com"

  Scenario Outline: search_scenario
#      "data"   --->>>> "<data>"
    And user search for "<data>"
    Then verify the page title contains "<data>"
    Then close the application
#      Examples must be used with scneario outline
#      Examples is used to pass data
    Examples: test data
      | data              |
      | bmw               |
      | tesla             |
      | mercedes          |
      | apple             |
      | iphone            |
      | banana            |
      | porcelain tea pot |


       ---------- Why do you use Scenario Outline? ---------------
To pass multiple different data
To make the steps reusable
To make the code shorter and cleaner
Scenario Outline is especially useful for running with multiple data for the same scenarios.
Search item where item = Tesla, Honda, Nissan,…
Create reservation with different user info where user info ={name=Jim,id=1},
{name=John,id=10},{name=Sam,id=80},…



---------------------- Cucumber HMTL reports -------------------
We need to add reports plugin in the Runner class to get the reports
We can get html, json, or junit reports
The most important report for testers is HTML reports
Add below to the runner class:

 plugin = {
                "pretty",                     // raporlarin daha okunakli olmasi icin
                "html:target/default-cucumber-reports.html",
                "json:target/json-reports/cucumber.json",
                "junit:target/xml-report/cucumber.xml",
                "rerun:target/failedRerun.txt"
        },
    monochrome = true     // raporlarin console da okunakli sekilde cikmasi icin
// RAPOR detayini gormek icin : target > default-cucumber-reports.html > sag click Open in > Browser  > Chrome
// Rapor dosyasina gitmek icin : target > default-cucumber-reports.html > sag click Open in > Explorer
// html report browserda acilan bir dosyadir. en cok tercih edilendir.
json ve xml uzerine cift tiklayip acabiliyorsun ama bunlar cok okunakli degil.


   ------------------- Data Tables  ------------------
   Scenario outline kadar kolay, kullanilisli, meshur  olmasada  bilinmesi gerekn seydir. Kullanimi zordur.
|  <== pipe denir bu cizginin adina
List Map  falan kullaniliyor kod kisminda.


   -------------- HOOKS ---------------
   What is hooks?
- Hooks is a class that runs Before or After each Scenario or Scenario Outline.
   Why do you use?
- I use hooks class to generate the reports with screenshot.
-  My after method especially helpful to capture screenshot when a Scenario fails automatically.
    What is in it?
- It has Before and After methods. I have reports method to capture the screenshot.

- class i run ettikten sonra   : target > default-cucumber-reports.html > Open in > browser chrome'da
   ac orda raporlar var.


   --------------- Cucumber raporlarini Cloud a ekleme --------------
   fail testi run ettikten sonra console'da en altta cerceve icerisinde :
 Share your Cucumber Report with your team at :https://reports.cucumber.io .......  sonra alttaki adimlar  ;
 1. resources dosyasinin altinda " cucumber.properties" file i olustur;
 2. dosya icine  ekle : cucumber.publish.enabled=true
 3. Testi calistir.  Sonra yine en altta console'da  View your Cucumber Report at : link veriyor, ve tikla.
    Bu sekilde cucumber html raporu cloud a yuklenecektir. Fakat Github ile giris yapilmazsa
    24 saat icinde silinecektir. Bu yuzden Github ile giris yapmali.
 4. Login with Github a tikla => Authorize SmartBear
 5. Name : kutunun icine rapora isim ver ve Create new  Collection
 6. Tokeni cucumber.properties dosyaya ekle
 7. Testi tekrar calistir. Coleections klosorunde raporlar olusacaktir.
  Bu ayari 1 kere yapiyoruz sonra raporlar hep oraya gitmis olacak.



   -------------- Excel -------------------
1)  Excel automatin test verilerini almak icin kullanilir.
  Cucumber da degisik sekillerle test datalari alinabilir :
  > Scenario Outline (cucumber)
  > DataTables(cucumber)
  > Excel(cucumber,testng,junit) Apache poi dependency si gerekli

          <!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
          <dependency>
              <groupId>org.apache.poi</groupId>
              <artifactId>poi</artifactId>
              <version>5.2.3</version>
          </dependency>
          <!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml -->
          <dependency>
              <groupId>org.apache.poi</groupId>
              <artifactId>poi-ooxml</artifactId>
              <version>5.2.3</version>
          </dependency>
2) configuration.properties dosyasina url i ekle :   br_url=https://www.bluerentalcars.com/   (bu sadece ornek)
3) excel_automation diye bir feature file olustur, ve oyle devam et.
4) stepdefinitions olustur (ExcelStepDefs)
5) homepage loginPage olustur.




   ------------ Parallel testing --------------
 Ayni anda birden fazla browser da test caseleri calistirma islemine parallel test denir.
1) Oncelikle pom.xml de cucumber ile parallel testi mumkun kilan plugins leri koyabiliriz.
   * Surefire plugin --> parallel test icin
   * Failsafe plugin --> parallel testlerde testin fail olmasi durumunda diger testlerin calismaya devam etmesini saglar.
   * cucumber- report --> extra renkli gelismis raporlar verir

    <!--    AFTER DEPENDENCIES BEFORE PROJECT-->
    <build>
        <plugins>
            <!--        1. MAKES THE FAILURE SAFE DURING PARALLEL TESTING.
            IF ONE BROWSER FAILS, OTHER PARALLEL TEST CASES CONTINUE TO EXECUTE-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>3.0.0-M1</version>
                <configuration>
                    <testFailureIgnore>true</testFailureIgnore>
                    <skipTests>false</skipTests>
                    <includes>
                        <include>**/runners/*TestRunner*.java</include>
                    </includes>
                </configuration>
            </plugin>
            <!--            2. RESPONSIBLE FOR PARALLEL TESTING -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M1</version>
                <configuration>
                    <parallel>classes</parallel>
                    <forkMode>perthread</forkMode>
                    <threadCount>3</threadCount>
                    <forkCount>false</forkCount>
                    <argLine>-Duser.language=en</argLine>
                    <argLine>-Xmx1024m</argLine>
                    <argLine>-XX:MaxPermSize=256m</argLine>
                    <argLine>-Dfile.encoding=UTF-8</argLine>
                    <useFile>false</useFile>
                    <includes>
                        <include>**/runners/*TestRunner*.java</include>
                    </includes>
                    <testFailureIgnore>true</testFailureIgnore>
                </configuration>
            </plugin>
            <!--            3. GENERATES REPORTS AFTER TEST EXECUTION WITH MAVEN-->
            <plugin>
                <groupId>net.masterthought</groupId>
                <artifactId>maven-cucumber-reporting</artifactId>
                <version>5.0.0</version>
                <executions>
                    <execution>
                        <id>execution</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <projectName>cucumber-framework</projectName>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <!-- <cucumberOutput>${project.build.directory}</cucumberOutput>-->
                            <inputDirectory>${project.build.directory}</inputDirectory>
                            <jsonFiles>
                                <param>**/json-reports/*.json</param>
                            </jsonFiles><classificationFiles>->
                            <param>sample.properties</param>
                            <param>other.properties</param>
                        </classificationFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>


2) Sonra birden fazla Runners olusturup(TestRunner,RegressionRunner,SmokeRunner), bu runner lari ayni anda maven commend ile calistirilarak paralel test yapilir.
3) intellijdeki  Terminalden maven projesini calistirmak icin : mvn clean verify + Enter  / mvn clean install + Enter
   Egerde laptoptaki cmd, powershell, terminalde calistirmak isterseniz, bu durumda projenin icine girmemiz lazim:
   terminali ac ;
                 mesela mycucumberproject projesinin ustune tikla copyPath > Absolute Path yap
                 terminalde : cd C:\Users\ROG\IdeaProjects\mycucumberproject\src     (cd: change directory demektir)
                 ondan sonra  mvn clean verify + Enter

# Testerlar her gun parallel test yapmazlar, ne zaman ki regression test yaparlarsa 5 6 saatlik o zaman parallel test iyidir.








